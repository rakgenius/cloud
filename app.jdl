application {
  config {
    baseName admindashboard,
    applicationType gateway,
    packageName com.rakeshv.hackathon.admindashboard,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    prodDatabaseType mysql,
    cacheProvider hazelcast,
    serverPort 9090
  }
  entities *
}

application {
  config {
    baseName customerdashboard,
    applicationType gateway,
    packageName com.rakeshv.hackathon.customerdashboard,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    prodDatabaseType mysql,
    cacheProvider hazelcast,
    serverPort 8080
  }
  entities UserAccount, OrderVps, OrderCsrp, VirtualMachine, PrivateCloud, Customer
}

application {
  config {
    baseName virtualMachine,
    applicationType microservice,
    packageName com.rakeshv.hackathon.vps,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    prodDatabaseType mysql,
    cacheProvider hazelcast,
    serverPort 8081
  }
  entities VirtualMachine
}

application {
  config {
    baseName privateCloud,
    applicationType microservice,
    packageName com.rakeshv.hackathon.csrp,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    prodDatabaseType mysql,
    cacheProvider hazelcast,
    serverPort 8082
  }
  entities PrivateCloud
}

application {
  config {
    baseName cloudStack,
    applicationType microservice,
    packageName com.rakeshv.hackathon.cloudstack,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    cacheProvider no,
    enableHibernateCache false,
    serverPort 8083
  }
}

application {
  config {
    baseName customerAccount,
    applicationType microservice,
    packageName com.rakeshv.hackathon.account,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    prodDatabaseType mysql,
    serverPort 8084
  }
  entities UserAccount
}

application {
  config {
    baseName orderService,
    applicationType microservice,
    packageName com.rakeshv.hackathon.orders,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    prodDatabaseType mysql,
    serverPort 8085
  }
  entities OrderVps, OrderCsrp
}

entity UserAccount {
    name String required
    domainName String
    email String pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
}

entity Vps {
    name String required
    cpu BigDecimal
    ram BigDecimal
    disk BigDecimal
    traffic BigDecimal
    template String
}

entity Csrp {
    domainName String
    cpu BigDecimal
    ram BigDecimal
    storage BigDecimal
    traffic BigDecimal
}

entity VirtualMachine {
    name String
    accountid BigDecimal
    accountName String
    cpu BigDecimal
    ram BigDecimal
    disk BigDecimal
    traffic BigDecimal
    template String
}

entity PrivateCloud {
    domainName String
    accountid BigDecimal
    accountName String
    cpu BigDecimal
    ram BigDecimal
    storage BigDecimal
    traffic BigDecimal
}

/*
Entities for order service
*/

entity OrderVps {
  name String
  vpspack BigDecimal
}

entity OrderCsrp {
  name String
  csrppack BigDecimal
}

enum DeliveryStatus {
    PROVISIONING, PROVISIONED, FAILED, PENDING
}

enum PaymentStatus {
    PAID, NOT_PAID
}

enum MachineState {
    RUNNING, STOPPED, DESTROYED
}
/* Entities for Store Gateway */

/** Product sold by the Online store */
// entity Product {
//     name String required
//     description String
//     price BigDecimal required min(0)
//     size Size required
//     image ImageBlob
// }

// enum Size {
//     S, M, L, XL, XXL
// }

// entity ProductCategory {
//     name String required
//     description String
// }

entity Customer {
    firstName String required
    lastName String required
    gender Gender required
    email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
    phone String required
    addressLine1 String required
    addressLine2 String
    city String required
    country String required
}

enum Gender {
    MALE, FEMALE
}

// entity ProductOrder {
//     placedDate Instant required
//     status OrderStatus required
//     code String required
//     invoiceId Long
// }

// enum OrderStatus {
//     COMPLETED, PENDING, CANCELLED
// }

// entity OrderItem {
//     quantity Integer required min(0)
//     totalPrice BigDecimal required min(0)
//     status OrderItemStatus required
// }

// enum OrderItemStatus {
//     AVAILABLE, OUT_OF_STOCK, BACK_ORDER
// }

relationship OneToOne {
    Customer{user(login) required} to User
}

// relationship ManyToOne {
//  OrderItem{product(name) required} to Product
// }

// relationship OneToMany {
//    Customer{order} to ProductOrder{customer(email) required}
//    ProductOrder{orderItem} to OrderItem{order(code) required} ,
//    ProductCategory{product} to Product{productCategory(name)}
// }

// service Product, ProductCategory, Customer, ProductOrder, OrderItem with serviceClass
// paginate Product, Customer, ProductOrder, OrderItem with pagination

/* Entities for Invoice microservice */
entity Invoice {
    code String required
    date Instant required
    details String
    status InvoiceStatus required
    paymentMethod PaymentMethod required
    paymentDate Instant required
    paymentAmount BigDecimal required
}

enum InvoiceStatus {
    PAID, ISSUED, CANCELLED
}

// entity Shipment {
//     trackingCode String
//     date Instant required
//     details String
// }

enum PaymentMethod {
    CREDIT_CARD, CASH_ON_DELIVERY, PAYPAL
}

// relationship OneToMany {
//     Invoice{shipment} to Shipment{invoice(code) required}
// }

// service Invoice, Shipment with serviceClass
// paginate Invoice, Shipment with pagination
//microservice Invoice with invoice

/* Entities for notification microservice */

// entity Notification {
//     date Instant required
//     details String
//     sentDate Instant required
//     format NotificationType required
//     userId Long required
//     productId Long required
// }

// enum NotificationType {
//     EMAIL, SMS, PARCEL
// }

// microservice Notification with notification

paginate VirtualMachine, PrivateCloud, OrderVps, OrderCsrp with pagination
microservice VirtualMachine with virtualMachine
microservice PrivateCloud with privateCloud
microservice OrderVps, OrderCsrp with orderService
