application {
  config {
    baseName admindashboard,
    applicationType gateway,
    packageName com.rakeshv.hackathon.admindashboard,
    serviceDiscoveryType no,
    authenticationType jwt,
    prodDatabaseType mysql,
    cacheProvider hazelcast,
    useSass true,
  }
  entities *
}

application {
  config {
    baseName virtualmachine,
    applicationType microservice,
    packageName com.rakeshv.hackathon.vps,
    serviceDiscoveryType no,
    authenticationType jwt,
    prodDatabaseType mysql,
    cacheProvider hazelcast,
    serverPort 8081
  }
  entities VirtualMachine
}

application {
  config {
    baseName privatecloud,
    applicationType microservice,
    packageName com.rakeshv.hackathon.csrp,
    serviceDiscoveryType no,
    authenticationType jwt,
    prodDatabaseType mysql,
    cacheProvider hazelcast,
    serverPort 8082
  }
  entities PrivateCloud
}

application {
  config {
    baseName cloudstack,
    applicationType microservice,
    packageName com.rakeshv.hackathon.cloudstack,
    serviceDiscoveryType no,
    authenticationType jwt,
    cacheProvider no,
    enableHibernateCache false,
    serverPort 8083
  }
}

application {
  config {
    baseName customeraccount,
    applicationType microservice,
    packageName com.rakeshv.hackathon.account,
    serviceDiscoveryType no,
    authenticationType jwt,
    prodDatabaseType mysql,
    serverPort 8084
  }
  entities UserAccount
}

application {
  config {
    baseName orders
    applicationType microservice
    packageName com.rakeshv.hackathon.orders
    serviceDiscoveryType no
    authenticationType jwt
    prodDatabaseType mysql
    cacheProvider hazelcast
    serverPort 8085
  }
  entities OrderVps, OrderCsrp
}

entity UserAccount {
    name String required
    domainName String
    email String pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
}

entity Vps {
    name String required
    cpu BigDecimal
    ram BigDecimal
    disk BigDecimal
    traffic BigDecimal
    template String
}

entity Csrp {
    domainName String
    cpu BigDecimal
    ram BigDecimal
    storage BigDecimal
    traffic BigDecimal
}

entity VirtualMachine {
    name String
    accountid BigDecimal
    accountName String
    cpu BigDecimal
    ram BigDecimal
    disk BigDecimal
    traffic BigDecimal
    template String
}

entity PrivateCloud {
    domainName String
    accountid BigDecimal
    accountName String
    cpu BigDecimal
    ram BigDecimal
    storage BigDecimal
    traffic BigDecimal
}

/*
Entities for order service
*/

entity OrderVps {
  name String
  vpspack BigDecimal
}

entity OrderCsrp {
  name String
  csrppack BigDecimal
}

enum DeliveryStatus {
    PROVISIONING, PROVISIONED, FAILED, PENDING
}

enum PaymentStatus {
    PAID, NOT_PAID
}

enum MachineState {
    RUNNING, STOPPED, DESTROYED
}
/* Entities for Store Gateway */

/** Product sold by the Online store */
// entity Product {
//     name String required
//     description String
//     price BigDecimal required min(0)
//     size Size required
//     image ImageBlob
// }

// enum Size {
//     S, M, L, XL, XXL
// }

// entity ProductCategory {
//     name String required
//     description String
// }

entity Customer {
    firstName String required
    lastName String required
    gender Gender required
    email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
    phone String required
    addressLine1 String required
    addressLine2 String
    city String required
    country String required
}

enum Gender {
    MALE, FEMALE
}

// entity ProductOrder {
//     placedDate Instant required
//     status OrderStatus required
//     code String required
//     invoiceId Long
// }

// enum OrderStatus {
//     COMPLETED, PENDING, CANCELLED
// }

// entity OrderItem {
//     quantity Integer required min(0)
//     totalPrice BigDecimal required min(0)
//     status OrderItemStatus required
// }

// enum OrderItemStatus {
//     AVAILABLE, OUT_OF_STOCK, BACK_ORDER
// }

relationship OneToOne {
    Customer{user(login) required} to User
}

// relationship ManyToOne {
//  OrderItem{product(name) required} to Product
// }

// relationship OneToMany {
//    Customer{order} to ProductOrder{customer(email) required}
//    ProductOrder{orderItem} to OrderItem{order(code) required} ,
//    ProductCategory{product} to Product{productCategory(name)}
// }

service OrderVps, OrderCsrp with serviceClass
service VirtualMachine, PrivateCloud with serviceClass
microservice OrderVps, OrderCsrp with orders
microservice VirtualMachine with virtualmachine
microservice PrivateCloud with privatecloud
paginate VirtualMachine, PrivateCloud, OrderVps, OrderCsrp with pagination


deployment {
  deploymentType kubernetes
  appsFolders [admindashboard, virtualmachine, privatecloud, cloudstack, customeraccount, orders]
  dockerRepositoryName "rakgenius"
  serviceDiscoveryType no
  istio true
  kubernetesServiceType Ingress
  kubernetesNamespace jhipster
  ingressDomain "178.162.213.42.nip.io"
}
